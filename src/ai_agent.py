import logging
from typing import Dict, Any
from src.knowledge_base import KnowledgeBase, get_formatted_csv_context
from src.tts import TTSProcessor
from src.processor import MessageProcessor

logger = logging.getLogger("src.ai_agent")

class AIAgent:
    def __init__(self):
        self.kb = KnowledgeBase("data/data.csv")
        self.processor = MessageProcessor()
        self.history = []
        logger.info("โ AI Agent initialized with buffer memory and GPT-4.1")

    async def generate_response(self, query: str, return_audio: bool = False) -> Dict[str, Any]:
        self.history.append({"role": "user", "content": query})

        context = get_formatted_csv_context("data/data.csv")

        messages = [{
            "role": "system",
            "content": f"""
ุงูุช ุดุบุงู ูุฎุฏูุฉ ุนููุงุก ููุญู ูุงููุฉ ูุฎุถุงุฑุ ุจุชุชููู ุฏุงูููุง ูุน ุงูุฒุจุงูู ุจุงูููุฌุฉ ุงููุตุฑูุฉ ุจุทุฑููุฉ ูุฏูุฏุฉ ููุฑูุญุฉ. ูุฏูู ุชุฌุงูุจ ุนูู ุฃุณุฆูุฉ ุงูุฃุณุนุงุฑุ ุงูุฃููุงุน ุงููุชุงุญุฉุ ุงูุนุฑูุถุ ุงูุฎุตููุงุชุ ูุงูุชูุตูู.

ูู ุญุฏ ุณุฃู ุนู ููุน ูุนููุ ุดูู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฑุฏ ุนููู ุจุงูุณุนุฑ ูุงูุนุฑูุถ ูู ูููุ ููู ูุด ูุชุงุญ ูููู ุฅูู ูุด ูุชุงุญ ุฏูููุชู ุจุดูู ููุฐุจ.

ุฃูุซูุฉ ููุฑุฏูุฏ:
- ูู ุงูุฒุจูู ุณุฃู "ุนูุฏู ููุฒุ" ูููู ุชุฑุฏ: "ุฃููู ุนูุฏูุง ููุฒ ุจูุฏู ุจู 18 ุฌููู ุงูููููุ ููุณุชูุฑุฏ ุจู 25 ุฌููู. ููุงู ุนุงูููู ุนุฑุถ ูู ุฎุฏุช 3 ูููู ูุชุฏูุน ุชูู 2 ููุต ุจุณ ๐ ุชุญุจ ุฃุฌูุจูู ูุฏ ุงููุ"
- ูู ุณุฃู "ููู ุฎุตููุงุชุ" ุชุฑุฏ: "ุฃููู ููู ุนุฑุถ ุงูููุงุฑุฏุฉ ุนูู ุงูุทูุงุทูุ ูููู ููุต ุจู 15 ุจุฏู 20ุ ูุนุฑุถ ููุงู ุนูู ุงูุชูุงุญ ุงููุณุชูุฑุฏ ุฎุฏ 3 ูููู ุจู 100 ุฌููู ุจุณ ๐"
- ูู ููุน ูุด ููุฌูุฏ: "ุฎูุต ูู ุนูุฏูุง ุฏูููุชูุ ุจุณ ุฑุงุฌุน ุจูุฑุฉ ูููููู ูุชููุฑ ุจุฅุฐู ุงูููุ ุชุญุจ ุฃุญุฌุฒูู ูููุฉุ"

ุฎููู ุฏุงูููุง ููุฐุจุ ูุงุถุญุ ูุฎุชุตุฑุ ููู ุงูุณุคุงู ูุด ูุงุถุญ ุงุณุฃู ุจูุทู "ูููู ุชูุถุญูู ุฃูุชุฑ ูุง ููุฏูุ"

ูุงุนุฏุฉ ุงูุจูุงูุงุช ุงูุญุงููุฉ:
{context}
""".strip()
        }] + self.history


        answer = await self.processor.run(messages)
        self.history.append({"role": "assistant", "content": answer})

        audio = None
        if return_audio:
            tts = TTSProcessor()
            audio = await tts.generate_audio(answer)

        return {"text": answer, "audio": audio}
